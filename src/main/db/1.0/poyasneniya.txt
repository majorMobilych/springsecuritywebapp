ПРО ТАБЛИЦУ users:
    1.  created - метаинф, вдруг захочу что-то с этим сделать.

    2.  updated - можно использовать для защиты от дудоса: если юзер слишком часто меняет пароль - подозрение на дудос.
        Защита: /например/ если пользователь за 10 минут 10 раз поменял пароль - отправляем его в бан.

    3.  status - если юзер банится /по какой-либо причине/, то мы его не удаляем, а в колонке статус пишем 'banned'. Из
        БД, вроде как, редко удаляют данные + потом можно будет проводить аналитику /+-/

    4.  email - понятно + /например/ восстановление пароля.

    5.  name - понятно.
        PRIMARY KEY: так как search на фронте будем работать /в основном/ по юзернейму, то проще всего сделать эту
        колонку primary key,
            ПРИМЕЧАНИЕ: мы можем так сделать, так как юзернейм никогда не null и уникальный.
            ПРИМЕЧАНИЕ: не надо создавать колонку ID для primary key-а - это лишние данные.

    6.  password - понятно.
            ПРИМЕЧАНИЕ: длина на 60, так как бкрипт всегда после кодирования возвращает строку длиной в 60 символов.

ПРО ТАБЛИЦУ roles:
    1.  created - метаинф, вдруг захочу что-то с этим сделать.

    2.  updated - метаинф, вдруг захочу что-то с этим сделать.

    3.  status - если я добавлю роль /например, 'модер'/, предоставлю ей какой-то функционал, а потом пойму, что она не
    нужна - поставлю статус 'deleted'.

    4.  role - имя роли.
        PRIMARY KEY: так как название роли уникально и не null - название роли однозначно ее определяет.
            ПРИМЕЧАНИЕ: не надо создавать колонку ID для primary key-а - это лишние данные.
            ПРИМЕЧАНИЕ: длина 32 символа, вроде должно хватить.

ПРО ТАБЛИЦУ users_to_roles:
    ИДЕЯ: у пользователя может быть несколько ролей, /например/ есть админ - он, при этом, и юзер. Давать каждому юзеру
    лишь одну роль - плохая идея, так как в конфигурации springSecurity надо будет указывать, что у админа больше
    полномочий, чем у юзера/как это делать - не понятно/
    + во всех туториалах в usersEntity-классе используется Set или List, состоящий из RolesEntity.
    + в классе User /org.springframework.security.core.userdetails/ есть поле Set<GrantedAuthority> authorities, которое
    является аналогом списка ролей пользователя - неявный намек на то, что каждому пользователю может соответствовать
    несколько ролей.
    Каждый из пользователей может выполнять несколько ролей. В свою очередь, каждой роли может соответствовать несколько
    пользователей -> связь сущностей 'пользователь' - 'роль' - многие ко многим. Для такого рода связей создается
    отдельная таблица
    + пример был в одном из файлов, что ты мне кидал про SQL.
    + https://qna.habr.com/user/Tabris17/tag_answers?tag=sql

    Таблица users_to_roles является таблицей, связывающей сущности 'пользователь' и 'роль'.

ПРО ТАБЛИЦУ agenda:
    1.  id -
        PRIMARY KEY: суррогатный первичный ключ, так как сделать даже составной первичный ключ из остальных колонок -
        как-то сложно. Поэтому создал суррогатный.

    2.  ...

    3.  ...

    4.  ...

    5.  Юзернейм того, кто сделал заметку.
        FOREIGN KEY: колонка связана с таблицей users колонкой 'name'.

    6.  day - день недели.
            ПРИМЕЧАНИЕ: максимальная длина - 9 у 'wednesday'.

    7.  time - время, на которое запланировано дело.
            ПРИМЕЧАНИЕ: формат времени: ЧЧ:ММ. С типом TIMESTAPM /типизировать его/ не хочу,
            + встроенного такого формата не нашел.

    8.  privacy - понятно.

    9.  note - понятно.
        ПРИМЕЧАНИЕ: ограничение 256 символов - должно хватать,
        + этого должно хватать.